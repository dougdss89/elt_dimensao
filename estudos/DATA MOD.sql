USE AdventureWorks2019;
GO

SET NOCOUNT ON;
GO

IF OBJECT_ID(N'DBO.SALES', N'U') IS NOT NULL DROP TABLE DBO.SALES;
GO
/*
SELECT 
	SALESORDERID,
	CUSTOMERID,
	CAST(ORDERDATE AS DATE) AS ORDERDATE,
	SUBTOTAL
INTO DBO.SALES
FROM Sales.SalesOrderHeader;
GO*/

SELECT 
	COALESCE(SALESORDERID, 0) AS SALESORDERID,
	CUSTOMERID
INTO DBO.SALES
FROM Sales.SalesOrderHeader;
GO

SELECT * FROM dbo.SALES;
GO

-- EXEMPLO COM INSERT + SELECT
IF OBJECT_ID(N'DBO.NEWSALES', N'U') IS NOT NULL DROP TABLE DBO.NEWSALES;
GO

CREATE TABLE DBO.NEWSALES( 
	SALESORDERID BIGINT,
	CUSTOMERID BIGINT);
GO

INSERT DBO.NEWSALES (SALESORDERID, CUSTOMERID)
SELECT SALESORDERID, CUSTOMERID
FROM SALES.SalesOrderHeader
ORDER BY CUSTOMERID DESC;
GO

SELECT * FROM DBO.NEWSALES;
GO

IF OBJECT_ID(N'DBO.NULLSALES', N'U') IS NOT NULL DROP TABLE DBO.NULLSALES;

-- A MANIPULA��O NO SELECT � PASSADA PARA A COLUNA ALVO
-- COMO NO EXEMPLO, QUE SUBSTITUI O NULL POR 0
-- CAST ALTERANDO DATATYPE TAMB�M FUNCIONA
SELECT
	SALESORDERID,
	CUSTOMERID,
	COALESCE(CAST(SALESPERSONID AS BIGINT), 0) AS SALESPERSON,
	SUBTOTAL 
INTO DBO.NULLSALES
FROM SALES.SalesOrderHeader;
GO

SELECT * FROM DBO.NULLSALES
WHERE CUSTOMERID IN (13265, 16482, 27617);
GO

-- LOCK NA TABELA E NOS METADADOS
-- ABRINDO OUTRA CONEX�O E CONSULTANDO AS TABELAS DE SISTEMA, A QUERY FICAR� EM WAIT

IF OBJECT_ID(N'DBO.TESTSCHEMA', N'U') IS NOT NULL DROP TABLE DBO.TESTSCHEMA;
GO
SELECT 
	FIRSTNAME,
	LASTNAME,
	BUSINESSENTITYID
INTO DBO.TESTSCHEMA
FROM Person.Person;

SELECT 
	COUNT(*) AS NUMREC,
	SUM(CAST([LOG RECORD LENGTH] AS BIGINT)) / 1048576. AS SIZEMB
FROM SYS.fn_dblog(NULL, NULL);
GO

-- IDENTITY X SEQUENCE

IF OBJECT_ID('IDENTITY_TABLE', N'U') IS NOT NULL DROP TABLE IDENTITY_TABLE;
GO
CREATE TABLE IDENTITY_TABLE(
	ID_IDENTITY INT NOT NULL IDENTITY(1,1),
	BUSINESSENTITYID INT,
	FIRSTNAME VARCHAR(100),
	LASTNAME VARCHAR(100),
	GENDER VARCHAR(10),
	JOBTITLE VARCHAR(50),
	HIREDATE DATE,
	CURRENTFLAG CHAR(5));
GO

INSERT INTO IDENTITY_TABLE (BUSINESSENTITYID, FIRSTNAME, LASTNAME, GENDER, JOBTITLE, HIREDATE, CURRENTFLAG)
SELECT
	PP.BUSINESSENTITYID,
	FIRSTNAME,
	LASTNAME,
	COALESCE(GENDER, 'N/A') AS GENDER,
	COALESCE(JOBTITLE, 'N/A') AS JOBTITLE,
	COALESCE(HIREDATE, '9999-12-31') AS HIREDATE,
	COALESCE(CAST(CURRENTFLAG AS char(3)), 'N/A') AS CURRENTFLAG
FROM Person.Person AS PP
	LEFT JOIN
	HumanResources.Employee AS HRE
ON PP.BusinessEntityID = HRE.BusinessEntityID;
GO

SELECT * FROM IDENTITY_TABLE;
GO

SELECT * 
INTO NEW_IDENTITY
FROM IDENTITY_TABLE;
GO
SELECT * FROM NEW_IDENTITY;
GO
TRUNCATE TABLE IDENTITY_TABLE;
GO

SELECT IDENTITY(INT, 1,1) AS NEW_ID,*
INTO NEW_DEPARTMENT
FROM HumanResources.Department;

SELECT IDENTITY(INT, 10, 2) AS NEW_ID, *
INTO NEW_SALARY
FROM HumanResources.EmployeePayHistory;

SELECT * FROM NEW_SALARY;
GO

-- CONFERINDO A COLUNA GERADA
select * from sys.identity_columns
where [name] = 'NEW_ID';


SELECT IDENTITY(INT, 1, 1) AS MAX_ID, *
INTO ID_IDENTITY
FROM HUMANRESOURCES.EMPLOYEE;

BEGIN TRAN
INSERT INTO ID_IDENTITY
SELECT * FROM HumanResources.Employee

ROLLBACK
GO
SELECT * FROM ID_IDENTITY;
go

CREATE SEQUENCE DBO.TESTESEQ AS INT
START WITH 0 -- VALOR INICIAL DA SEQUENCIA
INCREMENT BY 1 -- VALOR DE INCREMENTO
MINVALUE 0 -- VALOR M�NIMO ACEITO PELA SEQUENCIA
MAXVALUE 1000 -- VALOR M�XIMO DA SEQUENCIA
CYCLE -- 'FLAG' INDICANDO QUE EST� SEQUENCIA � C�CLICA
NO CACHE --| CACHE --  UTILIZAR� CACHE PARA ARMAZENAR

--TESTE
IF OBJECT_ID('DBO.NEW_SEQ', N'SO') IS NOT NULL DROP SEQUENCE DBO.NEW_SEQ;
GO
CREATE SEQUENCE DBO.NEW_SEQ AS INT
START WITH 0
INCREMENT BY 1
MAXVALUE 101
CYCLE
CACHE 100;
GO

SELECT NEXT VALUE FOR DBO.NEW_SEQ AS SEQ_VALUE;
GO 100

ALTER SEQUENCE DBO.NEW_SEQ
RESTART WITH 0
--START WITH 0
INCREMENT BY 1
MINVALUE 0
MAXVALUE 101
CYCLE
CACHE 100;
GO

SELECT NEXT VALUE FOR DBO.NEW_SEQ AS SEQ_VALUE;
GO 102

-- ADICIONANDO NA TABELA

CREATE TABLE DBO.TESTE_SEQ (

	ID INT NOT NULL,
	
	TEXTO VARCHAR(5) NOT NULL);
GO

ALTER TABLE DBO.TESTE_SEQ
ADD CONSTRAINT DFT_SEQ_NUMBER
DEFAULT (NEXT VALUE FOR DBO.NEW_SEQ) FOR ID;
GO

INSERT INTO DBO.TESTE_SEQ (TEXTO)
VALUES ('AAA'), ('BBB'), ('CCCC');
GO

SELECT * FROM DBO.TESTE_SEQ;
GO

-- UTILIZANDO SEQUENCE PARA UPDATE
IF OBJECT_ID(N'DBO.TABLE_UPD', N'U') IS NOT NULL DROP TABLE DBO.TABLE_UPD;
GO

SELECT 
	CUSTOMERID,
	PERSONID,
	STOREID,
	AccountNumber
INTO DBO.TABLE_UPD
FROM SALES.Customer;
GO

SELECT * FROM DBO.TABLE_UPD;
GO

IF OBJECT_ID (N'DBO.UPD_SEQ') IS NOT NULL DROP SEQUENCE DBO.UPD_SEQ;
GO

CREATE SEQUENCE DBO.UPD_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 50000
CYCLE
CACHE 5000;
GO

BEGIN TRAN
UPDATE DBO.TABLE_UPD
SET PersonID = NEXT VALUE FOR DBO.UPD_SEQ + 1,
StoreID = NEXT VALUE FOR DBO.UPD_SEQ + 1
OUTPUT
	deleted.PersonID,
	deleted.StoreID,
	inserted.PersonID,
	inserted.StoreID
WHERE StoreID IS NULL
ROLLBACK;
GO

ALTER TABLE DBO.TABLE_UPD
ADD  FILLCOL INT;
GO

BEGIN TRAN
UPDATE dbo.TABLE_UPD
SET FILLCOL =   (SELECT NEXT VALUE FOR DBO.UPD_SEQ 
				OVER (ORDER BY ACCOUNTNUMBER)
				FROM SALES.Customer)
OUTPUT
	deleted.FILLCOL,
	inserted.FILLCOL
WHERE CustomerID IS NOT NULL;
ROLLBACK
GO

INSERT INTO DBO.TABLE_UPD(CUSTOMERID, PERSONID, StoreID, AccountNumber, FILLCOL)
SELECT NEXT VALUE FOR DBO.UPD_SEQ 
		OVER(ORDER  BY ACCOUNTNUMBER) AS ACCID,
CUSTOMERID, PERSONID, STOREID, ACCOUNTNUMBER
FROM SALES.Customer;
GO

SELECT * FROM dbo.TABLE_UPD;
GO

-- GERENCIANDO IDENTITY COM TRUNCATE
IF OBJECT_ID('DBO.T1') IS NOT NULL DROP TABLE DBO.T1;
GO

CREATE TABLE DBO.T1(

KEYCOL INT NOT NULL IDENTITY,
DATACOL VARCHAR(10) NOT NULL);
GO

INSERT INTO DBO.T1(DATACOL) VALUES('A'), ('B'), ('C');
GO

-- CRIANDO O RESEED ANTES DO TRUNCATE
IF EXISTS(SELECT * FROM DBO.T1)
BEGIN
	BEGIN TRAN
		DECLARE @TMP AS INT = (SELECT TOP(1) KEYCOL FROM DBO.T1 WITH (TABLOCKX));
		DECLARE @RESEEDVAL AS INT = IDENT_CURRENT(N'DBO.T1') + 1

		TRUNCATE TABLE DBO.T1;

		DBCC CHECKIDENT (N'DBO.T1', RESEED, @RESEEDVAL);

		PRINT 'IDENTITY RESEED TO ' + CAST(@RESEEDVAL AS VARCHAR(10));

	COMMIT TRAN
END
ELSE
PRINT 'TABLE IS EMPTY, NO NEED TRUNCATE'

INSERT INTO DBO.T1(DATACOL) VALUES ('D'), ('E'), ('F');
GO

SELECT * FROM DBO.T1;
GO

--SWITCH TABLE

IF OBJECT_ID('DBO.T1_SWITCH') IS NOT NULL DROP TABLE DBO.T1_SWITCH;
GO

CREATE TABLE DBO.T1_SWITCH (

COL1 INT NOT NULL PRIMARY KEY,
COL2 INT NOT NULL,
COL3 NUMERIC(12,2) NOT NULL);
GO

INSERT INTO dbo.T1_SWITCH(COL1, COL2, COL3) VALUES
(2, 10, 200.00),
(3, 10, 800.00),
(5, 10, 100.00),
(7, 20, 300.00)
GO

CREATE VIEW DBO.VW_T1 WITH SCHEMABINDING AS 

SELECT COL2, SUM(COL3) AS TOTAL, COUNT_BIG(*) AS CNT
FROM dbo.T1_SWITCH
GROUP BY COL2;
GO

CREATE UNIQUE CLUSTERED INDEX  IDX_VWCOL2 ON DBO.VW_T1(COL2);
GO

SELECT * FROM DBO.VW_T1;
GO

-- TESTANDO O TRUNCATE
TRUNCATE TABLE DBO.T1_SWITCH;
GO

CREATE TABLE DBO.T1STAGE (
COL1 INT NOT NULL PRIMARY KEY,
COL2 INT NOT NULL, 
COL3 NUMERIC(12,2) NOT NULL);
GO

ALTER TABLE DBO.T1_SWITCH SWITCH TO DBO.T1STAGE;

DROP TABLE DBO.T1STAGE;

-- TRATANDO DUPLICATAS
select top(100)
	soh.salesorderid,
	soh.customerid,
	cast(soh.orderdate as date) as orderdate,
	soh.SalesPersonID,
	soh.SubTotal
into dbo.topsales
from Sales.SalesOrderHeader as soh

if OBJECT_ID('dbo.dupsales') is not null drop table dbo.dupsales;
go

select 
	soh.salesorderid,
	soh.customerid,
	cast(soh.orderdate as date) as orderdate,
	soh.SalesPersonID,
	soh.SubTotal
into dbo.dupsales
from Sales.SalesOrderHeader as soh
cross join
	dbo.topsales;


select customerid, SalesOrderID, SubTotal from dbo.dupsales
where CustomerID = 29825
order by SubTotal;

