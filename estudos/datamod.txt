DATA MODIFICATION

select into serve como cópia de dados de um banco para outro. Não replica estrutura física como index, constraints, triggers e permissions.

sua vantagem é a otimização no insert, quando se precisa de log mínimo para uma determinada massa de dados.

A forma de processamento com o SELECT INTO irá depender do modo em que o banco se enconta. Se ele estiver em recovery full, a operação será completamente logada.
Caso esteja como bulk-logged ou simple, será mínimo. Porém, se o transaction replication estiver habilitado, será full logged.

SELECT INTO aloca uma extent inteira (conjunto de 8 páginas de 8kb cada). Desse modo, ele apenas sinaliza para operações de undo.

Caso queira utilizar a propriedade do identity na tabela, declare no select o nome da coluna, o datatype e o start e seed do identity. Necessário informar que 
a ordem de inserção não é garantida, mesmo com order by - embora o banco consiga inserir na ordem.

Normalmente o SELECT INTO tem suas operações otimizadas pelo engine do SQL Server. A operação é rapidamente limpada da memória para o disco, sem precisar esperar o final.
Embora não pareça, esse flush da memória não é imediato, o que traz vantagens quando utilizamos com tabelas temporárias.

Nesse caso, criamos, consultamos e deletamos de forma eficiente reduzindo a quantidade de I/O.

O problema do SELECT INTO é que ele divide os recursos e causa um "shared lock" nas tabelas de sistema, já que precisa copiar os schemas da tabela fonte para a copia.
Então, operações desse tipo em tabelas muito grandes precisam ser limitadas ou copiaram uma quantidade pequena de dados.

-- talvez o dbt funcione assim, como um SELECT INTO da fonte para o destino.

--------------- SEQUENCE X IDENTITY ---------------

Existem duas formas de criar chaves, principalmente as SK's de DW no SQL Server: Sequences ou identity

Sequences são objetos criados no SQL Server fora de qualquer propriedade de tabela ou coluna, diferente da Identity que é uma propriedade e além disso, é muito inflexível no manuseio.
Identity cria uma sequencia numérica.

Por ser uma propriedade preza na coluna, não é possível gerenciar entre outras tabelas, não sendo uma boa opção quando lidamos com surrogate keys.


Colunas com identity não pode ser atualizadas via update.
Não é possível dissociar ou associar a propriedade identity em uma coluna existente. Somente criando uma nova
Não podemos gerar novas chaves com select. No select into, ela é informada na criação da tabela - sem ordem garantida
Se ela atingir o número máximo permitido pelo datatype, por exemplo, tinyint. Se passar de 256, acusara erro de overflow, necessitando do dbcc checkidentity
O incremento de uma identity não pode ser alterado
Não é possível criar um cache de valores com identity
Não permite alocar um range de valores para uma determinada coluna.

Por outro lado, sequences são mais flexíveis por ser um objeto independente. Único problema de uma sequence é quanto ao datatype. Por padrão será bigint e caso deseje mudar, terá de recriar a sequence.

Sequences permitem cache, range de valores e são cíclicas quando configuradas.

Quando a sequence possui um valor de cache, esse valor é carregado na memória, o que evita escrita em disco sempre que utilizamos a sequence.
Quanto maior o valor do cache, melhor a performance.

Dependendo da coluna que vá ser incrementada pela sequence e até mesmo uma identity, restrinja com constraints de integridade.

// talvez eu possa colocar o next value for no DBT para ele carregar as colunas com sequence no DW.
// para isso, irei precisar de algumas sequences no banco para gerenciar essas cargas nas tabelas.
// utilizar default constraint para carregar automaticamente
// gerenciar via etl com o orquestrador do airflow essa step de 'gestão' da tabela nas cargas

Graças ao OVER com ORDER BY, é possível preservar a sequencia da tabela fonte, ao mesmo tempo que gera uma sequencia nova com a sequence.

--------------- DATA MANIPULATION: DELETE, TRUNCATE & UPDATE ---------------

Delete e truncate são operações para apagar dados do banco de dados.

A diferença entre eles é que o truncate gera menos log do que o delete. O truncate também libera o espaço que era utilizado pelos dados apagados, diferente do delete.

independente do recovery model, o truncate irá gerar menos log no banco de dados. Ele apenas irá marcar as páginas que foram utilizadas para a operação, para um eventual rollback.

deletes costumam ser mais lentos em tabelas grandes por logar no arquivo LDF cada linha deletada.

Porém o delete é mais seguro, por ter controle a nível de coluna do que se pode e não deletar.

Outro problema do truncate é resetar o identity, caso a coluna tenha

Em tabelas que possuem FK ou views indexadas, não é possível executar truncate nelas.

Devido a natureza do DELETE ele é melhor para deletar linhas duplicadas.

O problema que se for deletar por lote, é necessário fazer um teste antes pois não é possível utilizar o begin tran com cte.

Tome cuidado com a criação da window function na hora de declarar a tabela no partition by. Garanta que ele vá criar um particionamento que "se repete" a ponto de mudar quando o valor mudar.

----------- UPDATE -----------

Duas formas comuns de se atualizar tabelas via comando update é utilizando table expressions ou variáveis

Update com CTE dá uma possibibilidade de prever o que será atualizado com base nas colunas que foram selecionadas da tabela.

O único problema é que não é possível utilizar o begin tran - rollback ou commit, justamente por causa da CTE; o que não ocorre com as views.

Como uma view é um 'estrutura' que tem sua lógica armazenada, explicitar transações com SQL se torna possível, garantindo uma segurança a mais.

O problema da view é que esbarra nas políticas de acesso e gerenciamento do ambiente de banco de dados da sua organização.

Tenha em mente que ao atualizar a view, o que está sendo atualizado é a coluna da tabela fonte, a view é apenas um estágio de confirmação do procedimento.

Quando utilizado CTE's ou Views para atualizar uma tabela, é preciso destacar que somente é possível atualizar uma por vez.

Um fato interessante no UPDATE, pelo menos com T-SQL, é que como o FROM funciona como WHERE, é possivel criar joins e atualizar uma tabela com base em outra.


-------------------------- MERGE --------------------------

Merge é uma forma de atualizar uma tabela base utilizando uma fonte, "misturando" as duas tabelas, mantendo os valores necesários. Apenas.

Merge permite duas formas de manipulação: WHEN MATCHED THEN e WHEN NOT MATCHED THEN e ambos podem variar com WHEN NOT MATCHED BY SOURCE THEN..

